from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List, Optional
import databutton as db
from datetime import datetime

router = APIRouter()

class ProjectCreate(BaseModel):
    name: str
    description: str
    funding_goal: float
    creator_address: str
    github_repo: Optional[str] = None
    website: Optional[str] = None
    image: str

class ProjectUpdate(BaseModel):
    title: str
    content: str

class ProjectMilestone(BaseModel):
    title: str
    description: str
    target_date: str
    funding_required: float

class Project(ProjectCreate):
    id: int
    current_funding: float = 0
    backers: List[str] = []
    updates: List[ProjectUpdate] = []
    milestones: List[ProjectMilestone] = []
    created_at: str
    status: str = "active"

class ProjectResponse(BaseModel):
    success: bool
    message: str
    data: Optional[Project] = None

@router.post("/create")
def create_project(project: ProjectCreate) -> ProjectResponse:
    try:
        # Get existing projects
        projects = db.storage.json.get("projects", default=[])
        
        # Create new project
        new_project = Project(
            id=len(projects) + 1,
            **project.model_dump(),
            created_at=datetime.now().isoformat()
        )
        
        # Add to projects list
        projects.append(new_project.model_dump())
        
        # Save updated projects list
        db.storage.json.put("projects", projects)
        
        return ProjectResponse(
            success=True,
            message="Project created successfully",
            data=new_project
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/list")
def list_projects() -> List[Project]:
    try:
        projects = db.storage.json.get("projects", default=[])
        return projects
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/get/{project_id}")
def get_project(project_id: int) -> Project:
    try:
        projects = db.storage.json.get("projects", default=[])
        project = next((p for p in projects if p["id"] == project_id), None)
        
        if not project:
            raise HTTPException(status_code=404, detail="Project not found")
            
        return project
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/back/{project_id}")
def back_project(project_id: int, backer_address: str, amount: float) -> ProjectResponse:
    try:
        projects = db.storage.json.get("projects", default=[])
        project_index = next((i for i, p in enumerate(projects) if p["id"] == project_id), None)
        
        if project_index is None:
            raise HTTPException(status_code=404, detail="Project not found")
            
        # Update project funding and backers
        project = projects[project_index]
        project["current_funding"] += amount
        if backer_address not in project["backers"]:
            project["backers"].append(backer_address)
            
        # Save updated projects
        db.storage.json.put("projects", projects)
        
        return ProjectResponse(
            success=True,
            message="Project backed successfully",
            data=Project(**project)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/update/{project_id}")
def add_project_update(project_id: int, update: ProjectUpdate) -> ProjectResponse:
    try:
        projects = db.storage.json.get("projects", default=[])
        project_index = next((i for i, p in enumerate(projects) if p["id"] == project_id), None)
        
        if project_index is None:
            raise HTTPException(status_code=404, detail="Project not found")
            
        # Add update
        project = projects[project_index]
        project["updates"].append({
            **update.model_dump(),
            "date": datetime.now().isoformat()
        })
            
        # Save updated projects
        db.storage.json.put("projects", projects)
        
        return ProjectResponse(
            success=True,
            message="Update added successfully",
            data=Project(**project)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
